{"mappings":"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","sources":["<anon>","src/index.js","src/imageKeeper.js"],"sourcesContent":["const $e527ffacf02e5bf7$var$NSFW_THRESHOLD = 0.05; // 1% threshold\n// Store both canvas context and images array globally\nlet $e527ffacf02e5bf7$var$canvasContext = null;\nlet $e527ffacf02e5bf7$var$images = [];\nconst $e527ffacf02e5bf7$var$MAX_IMAGES = 20;\nlet $e527ffacf02e5bf7$var$currentImage = null;\nlet $e527ffacf02e5bf7$var$blackPause = 0;\nlet $e527ffacf02e5bf7$var$ticksTillNextImage = 0;\nlet $e527ffacf02e5bf7$var$isClear = false;\nconst $e527ffacf02e5bf7$var$States = {\n    NORMAL: \"normal\",\n    EXPLORE: \"explore\"\n};\nlet $e527ffacf02e5bf7$var$currentState = $e527ffacf02e5bf7$var$States.NORMAL;\nlet $e527ffacf02e5bf7$var$allowNSFW = false; // Default to safe mode\nlet $e527ffacf02e5bf7$var$isMouseDown = false;\nlet $e527ffacf02e5bf7$var$lastDisplayedImage = null;\nfunction $e527ffacf02e5bf7$export$e68aa12be6c5ebb8({ allowNSFW: nsfw = false } = {}) {\n    $e527ffacf02e5bf7$var$allowNSFW = nsfw;\n    $e527ffacf02e5bf7$var$canvasContext = $e527ffacf02e5bf7$var$initializeCanvas();\n    $e527ffacf02e5bf7$var$startAnimationLoop();\n}\nfunction $e527ffacf02e5bf7$export$7bc0801d8428ec28(imageObject) {\n    // Content filtering\n    const classification = imageObject.classification || [];\n    const isNSFW = classification.some((c)=>(c.className === \"Porn\" || c.className === \"Hentai\") && c.probability > $e527ffacf02e5bf7$var$NSFW_THRESHOLD);\n    if (!$e527ffacf02e5bf7$var$allowNSFW && isNSFW) {\n        console.warn(\"NSFW content filtered\");\n        return null;\n    }\n    if ($e527ffacf02e5bf7$var$images.length >= $e527ffacf02e5bf7$var$MAX_IMAGES) $e527ffacf02e5bf7$var$images.shift(); // Remove oldest image\n    // Create and load image\n    const img = new Image();\n    img.src = imageObject.fullsize;\n    img.onload = ()=>{\n        // Calculate scaled dimensions (max 300px)\n        const scale = Math.min(300 / img.width, 300 / img.height, 1);\n        const width = img.width * scale;\n        const height = img.height * scale;\n        // Store image with its dimensions and random position\n        $e527ffacf02e5bf7$var$images.push({\n            element: img,\n            width: width,\n            height: height,\n            x: Math.floor(Math.random() * ($e527ffacf02e5bf7$var$canvasContext.viewportWidth - width)),\n            y: Math.floor(Math.random() * ($e527ffacf02e5bf7$var$canvasContext.viewportHeight - height))\n        });\n    };\n    return img;\n}\nconst $e527ffacf02e5bf7$var$drawFrame = ()=>{\n    const { ctx: ctx, viewportWidth: viewportWidth, viewportHeight: viewportHeight } = $e527ffacf02e5bf7$var$canvasContext;\n    // Skip all drawing logic if mouse is down\n    if (!$e527ffacf02e5bf7$var$isMouseDown) {\n        // Randomly clear image array\n        if (Math.random() < 0.002 && $e527ffacf02e5bf7$var$images.length > 5) {\n            $e527ffacf02e5bf7$var$images = [];\n            $e527ffacf02e5bf7$var$ticksTillNextImage = 20 + Math.floor(Math.random() * 30);\n        }\n        // Handle tick counter\n        if ($e527ffacf02e5bf7$var$ticksTillNextImage > 0) $e527ffacf02e5bf7$var$ticksTillNextImage--;\n        // Main drawing logic\n        if ($e527ffacf02e5bf7$var$blackPause === 0 && $e527ffacf02e5bf7$var$images.length > 0) {\n            $e527ffacf02e5bf7$var$isClear = false;\n            if ($e527ffacf02e5bf7$var$currentState === $e527ffacf02e5bf7$var$States.EXPLORE) {\n                const size = Math.random() * 0.6;\n                const sourceWidth = $e527ffacf02e5bf7$var$currentImage.element.width * size;\n                const sourceHeight = $e527ffacf02e5bf7$var$currentImage.element.height * size;\n                const x = sourceWidth * Math.random();\n                const y = sourceHeight * Math.random();\n                ctx.drawImage($e527ffacf02e5bf7$var$currentImage.element, x, y, sourceWidth, sourceHeight, 0, 0, viewportWidth, viewportHeight);\n                if (Math.random() < 0.2) $e527ffacf02e5bf7$var$currentState = $e527ffacf02e5bf7$var$States.NORMAL;\n                $e527ffacf02e5bf7$var$blackPause = 1;\n            }\n            if ($e527ffacf02e5bf7$var$currentState === $e527ffacf02e5bf7$var$States.NORMAL) {\n                if (!$e527ffacf02e5bf7$var$currentImage || Math.random() < 0.7) $e527ffacf02e5bf7$var$currentImage = $e527ffacf02e5bf7$var$images[Math.floor(Math.random() * $e527ffacf02e5bf7$var$images.length)];\n                ctx.drawImage($e527ffacf02e5bf7$var$currentImage.element, 0, 0, viewportWidth, viewportHeight);\n                if (Math.random() < 0.15) $e527ffacf02e5bf7$var$currentState = $e527ffacf02e5bf7$var$States.EXPLORE;\n                // Set black pause duration based on number of images\n                if ($e527ffacf02e5bf7$var$images.length < 5) $e527ffacf02e5bf7$var$blackPause = Math.floor(Math.random() * ($e527ffacf02e5bf7$var$MAX_IMAGES - $e527ffacf02e5bf7$var$images.length) * 3);\n                else if ($e527ffacf02e5bf7$var$images.length < 10) $e527ffacf02e5bf7$var$blackPause = Math.floor(Math.random() * 4);\n                else $e527ffacf02e5bf7$var$blackPause = Math.floor(Math.random() * 2);\n                $e527ffacf02e5bf7$var$isClear = false;\n            }\n            // Store the last successfully drawn image\n            if ($e527ffacf02e5bf7$var$currentImage && !$e527ffacf02e5bf7$var$isClear) $e527ffacf02e5bf7$var$lastDisplayedImage = $e527ffacf02e5bf7$var$currentImage;\n        } else {\n            if (!$e527ffacf02e5bf7$var$isClear && Math.random() < 0.8) {\n                ctx.fillStyle = \"#000000\";\n                ctx.fillRect(0, 0, viewportWidth, viewportHeight);\n                $e527ffacf02e5bf7$var$isClear = true;\n            }\n            if ($e527ffacf02e5bf7$var$blackPause > 0) $e527ffacf02e5bf7$var$blackPause--;\n        }\n    } else if ($e527ffacf02e5bf7$var$lastDisplayedImage) // When mouse is down, keep showing the last displayed image\n    ctx.drawImage($e527ffacf02e5bf7$var$lastDisplayedImage.element, 0, 0, viewportWidth, viewportHeight);\n    requestAnimationFrame($e527ffacf02e5bf7$var$drawFrame);\n};\n// Replace existing startAnimationLoop with:\nconst $e527ffacf02e5bf7$var$startAnimationLoop = ()=>{\n    const { ctx: ctx } = $e527ffacf02e5bf7$var$canvasContext;\n    ctx.imageSmoothingEnabled = false;\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, $e527ffacf02e5bf7$var$canvasContext.viewportWidth, $e527ffacf02e5bf7$var$canvasContext.viewportHeight);\n    requestAnimationFrame($e527ffacf02e5bf7$var$drawFrame);\n};\nconst $e527ffacf02e5bf7$var$initializeCanvas = ()=>{\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    // Move viewport sizing logic to separate function for reuse\n    const updateCanvasSize = ()=>{\n        const dpr = window.devicePixelRatio || 1;\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        canvas.width = viewportWidth * dpr;\n        canvas.height = viewportHeight * dpr;\n        canvas.style.width = `${viewportWidth}px`;\n        canvas.style.height = `${viewportHeight}px`;\n        ctx.scale(dpr, dpr);\n        return {\n            viewportWidth: viewportWidth,\n            viewportHeight: viewportHeight\n        };\n    };\n    // Initial canvas setup\n    const viewport = updateCanvasSize();\n    // Add resize listener\n    window.addEventListener(\"resize\", ()=>{\n        const newViewport = updateCanvasSize();\n        $e527ffacf02e5bf7$var$canvasContext.viewportWidth = newViewport.viewportWidth;\n        $e527ffacf02e5bf7$var$canvasContext.viewportHeight = newViewport.viewportHeight;\n    });\n    // Add mouse event listeners\n    canvas.addEventListener(\"mousedown\", ()=>$e527ffacf02e5bf7$var$isMouseDown = true);\n    canvas.addEventListener(\"mouseup\", ()=>$e527ffacf02e5bf7$var$isMouseDown = false);\n    canvas.addEventListener(\"mouseleave\", ()=>$e527ffacf02e5bf7$var$isMouseDown = false);\n    document.body.appendChild(canvas);\n    return {\n        canvas: canvas,\n        ctx: ctx,\n        viewportWidth: viewport.viewportWidth,\n        viewportHeight: viewport.viewportHeight\n    };\n};\n\n\nconst $35da740d59af89ba$var$ws = new WebSocket(\"ws://localhost:3001\");\nconst $35da740d59af89ba$var$feedDiv = document.getElementById(\"feed\");\nfunction $35da740d59af89ba$export$72947bc920927fd0({ allowNSFW: allowNSFW = false } = {}) {\n    const ws = new WebSocket(\"ws://localhost:3001\");\n    const feedDiv = document.getElementById(\"feed\");\n    (0, $e527ffacf02e5bf7$export$e68aa12be6c5ebb8)({\n        allowNSFW: allowNSFW\n    });\n    ws.onmessage = (event)=>{\n        const message = JSON.parse(event.data);\n        const images = message.embed.images;\n        images.forEach((image)=>{\n            (0, $e527ffacf02e5bf7$export$7bc0801d8428ec28)(image, allowNSFW);\n        });\n    };\n    ws.onclose = ()=>{\n        console.log(\"WebSocket closed. Reconnecting...\");\n        // Try to reconnect after 1 second\n        setTimeout($35da740d59af89ba$export$72947bc920927fd0, 1000);\n        console.log(\"Attempting to reconnect...\");\n    };\n    ws.onerror = (error)=>{\n        console.error(\"WebSocket error:\", error);\n        ws.close();\n    };\n    ws.onopen = ()=>{\n        console.log(\"WebSocket connected\");\n    };\n}\nconst $35da740d59af89ba$var$initializeWithModal = ()=>{\n    const modal = document.getElementById(\"modal\");\n    const warning1 = document.querySelector(\".warning-1\");\n    const warning2 = document.querySelector(\".warning-2\");\n    // First warning button\n    document.querySelector(\".warning-1 button\").addEventListener(\"click\", ()=>{\n        warning1.style.display = \"none\";\n        warning2.style.display = \"block\";\n    });\n    // SFW button\n    document.querySelector(\".warning-2 button.sfw\").addEventListener(\"click\", ()=>{\n        modal.style.display = \"none\";\n        $35da740d59af89ba$export$72947bc920927fd0({\n            allowNSFW: false\n        });\n    });\n    // NSFW button\n    document.querySelector(\".warning-2 button.nsfw\").addEventListener(\"click\", ()=>{\n        modal.style.display = \"none\";\n        $35da740d59af89ba$export$72947bc920927fd0({\n            allowNSFW: true\n        });\n    });\n};\n// Replace the previous connectWebSocket() call with:\ndocument.addEventListener(\"DOMContentLoaded\", $35da740d59af89ba$var$initializeWithModal);\n\n\n//# sourceMappingURL=index.ffef2814.js.map\n","import { addImage, initializeImageKeeper } from './imageKeeper.js';\n\nconst ws = new WebSocket('ws://localhost:3001');\nconst feedDiv = document.getElementById('feed');\n\nexport function connectWebSocket({ allowNSFW = false } = {}) {\n    const ws = new WebSocket('ws://localhost:3001');\n    const feedDiv = document.getElementById('feed');\n    initializeImageKeeper({ allowNSFW })\n    ws.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        const images = message.embed.images\n        images.forEach(image => {\n            addImage(image, allowNSFW);\n        });\n    };\n\n    ws.onclose = () => {\n        console.log('WebSocket closed. Reconnecting...');\n        // Try to reconnect after 1 second\n        setTimeout(connectWebSocket, 1000);\n        console.log('Attempting to reconnect...');\n    };\n\n    ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        ws.close();\n    };\n    ws.onopen = () => {\n        console.log('WebSocket connected');\n    };\n}\n\nconst initializeWithModal = () => {\n    const modal = document.getElementById('modal');\n    const warning1 = document.querySelector('.warning-1');\n    const warning2 = document.querySelector('.warning-2');\n    \n    // First warning button\n    document.querySelector('.warning-1 button').addEventListener('click', () => {\n        warning1.style.display = 'none';\n        warning2.style.display = 'block';\n    });\n\n    // SFW button\n    document.querySelector('.warning-2 button.sfw').addEventListener('click', () => {\n        modal.style.display = 'none';\n        connectWebSocket({ allowNSFW: false });\n    });\n\n    // NSFW button\n    document.querySelector('.warning-2 button.nsfw').addEventListener('click', () => {\n        modal.style.display = 'none';\n        connectWebSocket({ allowNSFW: true });\n    });\n};\n\n// Replace the previous connectWebSocket() call with:\ndocument.addEventListener('DOMContentLoaded', initializeWithModal);\n","const NSFW_THRESHOLD = 0.05; // 1% threshold\n\n// Store both canvas context and images array globally\nlet canvasContext = null;\nlet images = [];\n\nconst MAX_IMAGES = 20;\nlet currentImage = null;\nlet blackPause = 0;\nlet ticksTillNextImage = 0;\nlet isClear = false;\n\nconst States = {\n    NORMAL: 'normal',\n    EXPLORE: 'explore'\n};\nlet currentState = States.NORMAL;\n\nlet allowNSFW = false;  // Default to safe mode\n\nlet isMouseDown = false;\n\nlet lastDisplayedImage = null;\n\nexport function initializeImageKeeper({ allowNSFW: nsfw = false } = {}) {\n    allowNSFW = nsfw;\n    canvasContext = initializeCanvas();\n    startAnimationLoop();\n}\n\nexport function addImage(imageObject) {\n    // Content filtering\n    const classification = imageObject.classification || [];\n    \n    const isNSFW = classification.some(c => \n        (c.className === 'Porn' || c.className === 'Hentai') && \n        c.probability > NSFW_THRESHOLD\n    );\n\n    if (!allowNSFW && isNSFW) {\n        console.warn('NSFW content filtered');\n        return null;\n    }\n\n    if (images.length >= MAX_IMAGES) {\n        images.shift(); // Remove oldest image\n    }\n\n    // Create and load image\n    const img = new Image();\n    img.src = imageObject.fullsize;\n    \n    img.onload = () => {\n        // Calculate scaled dimensions (max 300px)\n        const scale = Math.min(300 / img.width, 300 / img.height, 1);\n        const width = img.width * scale;\n        const height = img.height * scale;\n        \n        // Store image with its dimensions and random position\n        images.push({\n            element: img,\n            width,\n            height,\n            x: Math.floor(Math.random() * (canvasContext.viewportWidth - width)),\n            y: Math.floor(Math.random() * (canvasContext.viewportHeight - height))\n        });\n    };\n    \n    return img;\n}\n\nconst drawFrame = () => {\n    const { ctx, viewportWidth, viewportHeight } = canvasContext;\n    \n    // Skip all drawing logic if mouse is down\n    if (!isMouseDown) {\n        // Randomly clear image array\n        if (Math.random() < 0.002 && images.length > 5) {\n            images = [];\n            ticksTillNextImage = 20 + Math.floor(Math.random() * 30);\n        }\n\n        // Handle tick counter\n        if (ticksTillNextImage > 0) {\n            ticksTillNextImage--;\n        }\n\n        // Main drawing logic\n        if (blackPause === 0 && images.length > 0) {\n            isClear = false;\n\n            if (currentState === States.EXPLORE) {\n                const size = Math.random() * 0.6;\n                const sourceWidth = currentImage.element.width * size;\n                const sourceHeight = currentImage.element.height * size;\n                const x = sourceWidth * Math.random();\n                const y = sourceHeight * Math.random();\n\n                ctx.drawImage(\n                    currentImage.element, \n                    x, y, sourceWidth, sourceHeight,\n                    0, 0, viewportWidth, viewportHeight\n                );\n\n                if (Math.random() < 0.2) {\n                    currentState = States.NORMAL;\n                }\n                blackPause = 1;\n            }\n\n            if (currentState === States.NORMAL) {\n                if (!currentImage || Math.random() < 0.7) {\n                    currentImage = images[Math.floor(Math.random() * images.length)];\n                }\n\n                ctx.drawImage(\n                    currentImage.element,\n                    0, 0, viewportWidth, viewportHeight\n                );\n\n                if (Math.random() < 0.15) {\n                    currentState = States.EXPLORE;\n                }\n\n                // Set black pause duration based on number of images\n                if (images.length < 5) {\n                    blackPause = Math.floor(Math.random() * (MAX_IMAGES - images.length) * 3);\n                } else if (images.length < 10) {\n                    blackPause = Math.floor(Math.random() * 4);\n                } else {\n                    blackPause = Math.floor(Math.random() * 2);\n                }\n\n                isClear = false;\n            }\n\n            // Store the last successfully drawn image\n            if (currentImage && !isClear) {\n                lastDisplayedImage = currentImage;\n            }\n        } else {\n            if (!isClear && Math.random() < 0.8) {\n                ctx.fillStyle = '#000000';\n                ctx.fillRect(0, 0, viewportWidth, viewportHeight);\n                isClear = true;\n            }\n            if (blackPause > 0) {\n                blackPause--;\n            }\n        }\n    } else if (lastDisplayedImage) {\n        // When mouse is down, keep showing the last displayed image\n        ctx.drawImage(\n            lastDisplayedImage.element,\n            0, 0, viewportWidth, viewportHeight\n        );\n    }\n\n    requestAnimationFrame(drawFrame);\n};\n\n// Replace existing startAnimationLoop with:\nconst startAnimationLoop = () => {\n    const { ctx } = canvasContext;\n    ctx.imageSmoothingEnabled = false;\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvasContext.viewportWidth, canvasContext.viewportHeight);\n    \n    requestAnimationFrame(drawFrame);\n};\n\nconst initializeCanvas = () => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Move viewport sizing logic to separate function for reuse\n    const updateCanvasSize = () => {\n        const dpr = window.devicePixelRatio || 1;\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        \n        canvas.width = viewportWidth * dpr;\n        canvas.height = viewportHeight * dpr;\n        canvas.style.width = `${viewportWidth}px`;\n        canvas.style.height = `${viewportHeight}px`;\n        \n        ctx.scale(dpr, dpr);\n        \n        return { viewportWidth, viewportHeight };\n    };\n    \n    // Initial canvas setup\n    const viewport = updateCanvasSize();\n    \n    // Add resize listener\n    window.addEventListener('resize', () => {\n        const newViewport = updateCanvasSize();\n        canvasContext.viewportWidth = newViewport.viewportWidth;\n        canvasContext.viewportHeight = newViewport.viewportHeight;\n    });\n    \n    // Add mouse event listeners\n    canvas.addEventListener('mousedown', () => isMouseDown = true);\n    canvas.addEventListener('mouseup', () => isMouseDown = false);\n    canvas.addEventListener('mouseleave', () => isMouseDown = false);\n    \n    document.body.appendChild(canvas);\n    \n    return { \n        canvas, \n        ctx, \n        viewportWidth: viewport.viewportWidth, \n        viewportHeight: viewport.viewportHeight \n    };\n};\n"],"names":["$e527ffacf02e5bf7$var$canvasContext","$e527ffacf02e5bf7$var$images","$e527ffacf02e5bf7$var$currentImage","$e527ffacf02e5bf7$var$blackPause","$e527ffacf02e5bf7$var$ticksTillNextImage","$e527ffacf02e5bf7$var$isClear","$e527ffacf02e5bf7$var$States","NORMAL","EXPLORE","$e527ffacf02e5bf7$var$currentState","$e527ffacf02e5bf7$var$allowNSFW","$e527ffacf02e5bf7$var$isMouseDown","$e527ffacf02e5bf7$var$lastDisplayedImage","$e527ffacf02e5bf7$var$drawFrame","ctx","viewportWidth","viewportHeight","drawImage","element","Math","random","length","floor","size","sourceWidth","width","sourceHeight","height","x","y","$e527ffacf02e5bf7$var$MAX_IMAGES","fillStyle","fillRect","requestAnimationFrame","$e527ffacf02e5bf7$var$startAnimationLoop","imageSmoothingEnabled","$e527ffacf02e5bf7$var$initializeCanvas","canvas","document","createElement","getContext","updateCanvasSize","dpr","window","devicePixelRatio","innerWidth","innerHeight","style","scale","viewport","addEventListener","newViewport","body","appendChild","$35da740d59af89ba$export$72947bc920927fd0","allowNSFW","ws","WebSocket","getElementById","nsfw","onmessage","event","images","message","JSON","parse","data","embed","forEach","image","imageObject","isNSFW","classification","some","c","className","probability","console","warn","shift","img","Image","src","fullsize","onload","min","push","onclose","log","setTimeout","onerror","error","close","onopen","modal","warning1","querySelector","warning2","display"],"version":3,"file":"index.ffef2814.js.map"}